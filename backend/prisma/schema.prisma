datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums for SQLite must be represented as String types in the models.
// The values (ADMIN, PRODUCER, etc.) will be stored as strings in the database.

// You will effectively treat these "enums" as String types in your application code
// and ensure that only valid string values are used.

model User {
  id                 String      @id @default(cuid())
  email              String?     @unique
  password           String?
  companyName        String?
  companyData        String?     @map("companyDataJson")
  // Changed UserRole enum to String for SQLite compatibility
  role               String      @default("PRODUCER") // Default value must be a string
  logoId             String?
  startScreenImageId String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  logo               Multimedia? @relation("UserLogo", fields: [logoId], references: [id], onDelete: SetNull)
  startScreenImage   Multimedia? @relation("UserStartScreenImage", fields: [startScreenImageId], references: [id], onDelete: SetNull)
  accounts           Account[]
  multimedia         Multimedia[]
  products           Product[]
  properties         Property[]
  orders             Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  // Removed @db.Text - String maps to TEXT in SQLite automatically
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Customer {
  id      String  @id @default(cuid())
  name    String?
  email   String  @unique
  phone   String?
  address String? @map("addressJson")

  orders Order[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  basePrice   Float
  isActive    Boolean     @default(true)
  ownerId     String
  mainImageId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  owner       User        @relation(fields: [ownerId], references: [id])
  mainImage   Multimedia? @relation(fields: [mainImageId], references: [id], onDelete: SetNull)

  categories  ProductCategory[]
  properties  ProductProperty[]
  skus        ProductSku[]
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]        @relation("CategoryHierarchy")
  products    ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String
  assignedAt DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Property {
  id               String            @id @default(cuid())
  name             String
  isGlobal         Boolean           @default(false)
  ownerId          String?
  createdAt        DateTime          @default(now())

  owner            User?             @relation(fields: [ownerId], references: [id])
  propertyVariants PropertyVariant[]
  products         ProductProperty[]
}

model ProductProperty {
  productId  String
  propertyId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([productId, propertyId])
}

model PropertyVariant {
  id          String      @id @default(cuid())
  name        String
  propertyId  String
  imageId     String?
  createdAt   DateTime    @default(now())

  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  image       Multimedia? @relation(fields: [imageId], references: [id], onDelete: SetNull)

  productSkus ProductSkuPropertyVariant[]
}

model ProductSku {
  id               String                      @id @default(cuid())
  productId        String
  skuCode          String?                     @unique
  price            Float?
  stockQuantity    Int                         @default(0)
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt

  product          Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  propertyVariants ProductSkuPropertyVariant[]
  orderItems       OrderItem[]
}

model ProductSkuPropertyVariant {
  productSkuId      String
  propertyVariantId String

  productSku        ProductSku      @relation(fields: [productSkuId], references: [id], onDelete: Cascade)
  propertyVariant   PropertyVariant @relation(fields: [propertyVariantId], references: [id], onDelete: Cascade)

  @@id([productSkuId, propertyVariantId])
}

model Order {
  id                    String         @id @default(cuid())
  orderDate             DateTime       @default(now())
  // Changed OrderStatus enum to String for SQLite compatibility
  status                String         @default("PENDING")
  customerData          String?        @map("customerDataJson")
  customerId            String?
  producerId            String

  // Changed ApprovalPolicy enum to String for SQLite compatibility
  approvalPolicy        String         @default("AUTOMATIC")
  // Changed HandlingMethod enum to String for SQLite compatibility
  handlingMethod        String         @default("EMAIL")
  confirmationMessage   String?
  handlingEmail         String?
  handlingEmailTemplate String?
  handlingApiUrl        String?

  customer              Customer?      @relation(fields: [customerId], references: [id], onDelete: SetNull)
  producer              User           @relation(fields: [producerId], references: [id])
  items                 OrderItem[]
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  productSkuId        String
  quantity            Int
  pricePerUnitAtOrder Float

  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productSku          ProductSku @relation(fields: [productSkuId], references: [id], onDelete: Restrict)
}

model Multimedia {
  id             String            @id @default(cuid())
  url            String
  // Changed FileType enum to String for SQLite compatibility
  fileType       String
  altText        String?
  ownerId        String
  createdAt      DateTime          @default(now())

  owner          User              @relation(fields: [ownerId], references: [id])
  usedAsLogo     User[]            @relation("UserLogo")
  usedAsStartImg User[]            @relation("UserStartScreenImage")
  usedInProducts Product[]
  usedInVariants PropertyVariant[]
}