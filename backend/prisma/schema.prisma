datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Definicja natywnych typÃ³w Enum dla PostgreSQL
enum UserRole {
  ADMIN
  PRODUCER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  CANCELLED
}

enum ApprovalPolicy {
  AUTOMATIC
  MANUAL
}

enum HandlingMethod {
  EMAIL
  API
}

enum FileType {
  PNG
  JPG
  WEBP
  PDF
}

enum BodyShape {
  INVERTED_TRIANGLE
  HOURGLASS
  OVAL
  RECTANGLE
  TRIANGLE
}

enum StylePreference {
  FITTED_WEAR
  OVERSIZE_WEAR
  RETRO_SHAPES
  MASCULINE_SHAPES
}

model User {
  id                   String      @id @default(cuid())
  email                String?     @unique
  password             String?
  companyName          String?
  companyData          Json?       @map("companyDataJson") // POPRAWKA: String -> Json
  role                 UserRole    @default(PRODUCER)      // POPRAWKA: String -> UserRole
  logoId               String?
  startScreenImageId   String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  logo                 Multimedia? @relation("UserLogo", fields: [logoId], references: [id], onDelete: SetNull)
  startScreenImage     Multimedia? @relation("UserStartScreenImage", fields: [startScreenImageId], references: [id], onDelete: SetNull)
  accounts             Account[]
  multimedia           Multimedia[]
  products             Product[]
  properties           Property[]
  orders               Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Customer {
  id      String  @id @default(cuid())
  name    String?
  email   String  @unique
  phone   String?
  address Json?   @map("addressJson") // POPRAWKA: String -> Json
  
  orders Order[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  basePrice   Decimal   // POPRAWKA: Float -> Decimal
  isActive    Boolean   @default(true)
  ownerId     String
  mainImageId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  suitableFor BodyShape[]
  style       StylePreference[]
  
  owner       User        @relation(fields: [ownerId], references: [id])
  mainImage   Multimedia? @relation(fields: [mainImageId], references: [id], onDelete: SetNull)
  
  categories  ProductCategory[]
  properties  ProductProperty[]
  skus        ProductSku[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]        @relation("CategoryHierarchy")
  products    ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String
  assignedAt DateTime @default(now())
  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
}

model Property {
  id               String            @id @default(cuid())
  name             String
  isGlobal         Boolean           @default(false)
  ownerId          String?
  createdAt        DateTime          @default(now())
  
  owner            User?             @relation(fields: [ownerId], references: [id])
  propertyVariants PropertyVariant[]
  products         ProductProperty[]
}

model ProductProperty {
  productId  String
  propertyId String
  hotspotX   Float?
  hotspotY   Float?
  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@id([productId, propertyId])
}

model PropertyVariant {
  id          String    @id @default(cuid())
  name        String
  propertyId  String
  imageId     String?
  createdAt   DateTime  @default(now())
  
  property      Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  image         Multimedia?                 @relation(fields: [imageId], references: [id], onDelete: SetNull)
  
  productSkus   ProductSkuPropertyVariant[]
}

model ProductSku {
  id              String      @id @default(cuid())
  productId       String
  skuCode         String?     @unique
  price           Decimal?    // POPRAWKA: Float -> Decimal
  stockQuantity   Int         @default(0)
  imageId         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  image            Multimedia?                 @relation(fields: [imageId], references: [id], onDelete: SetNull)
  product          Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  propertyVariants ProductSkuPropertyVariant[]
  orderItems       OrderItem[]
}

model ProductSkuPropertyVariant {
  productSkuId      String
  propertyVariantId String
  
  productSku        ProductSku      @relation(fields: [productSkuId], references: [id], onDelete: Cascade)
  propertyVariant   PropertyVariant @relation(fields: [propertyVariantId], references: [id], onDelete: Cascade)
  
  @@id([productSkuId, propertyVariantId])
}

model Order {
  id                    String         @id @default(cuid())
  orderDate             DateTime       @default(now())
  status                OrderStatus    @default(PENDING)      // POPRAWKA: String -> OrderStatus
  customerData          Json?          @map("customerDataJson") // POPRAWKA: String -> Json
  customerId            String?
  producerId            String
  approvalPolicy        ApprovalPolicy @default(AUTOMATIC)   // POPRAWKA: String -> ApprovalPolicy
  handlingMethod        HandlingMethod @default(EMAIL)       // POPRAWKA: String -> HandlingMethod
  confirmationMessage   String?
  handlingEmail         String?
  handlingEmailTemplate String?
  handlingApiUrl        String?
  
  customer              Customer?      @relation(fields: [customerId], references: [id], onDelete: SetNull)
  producer              User           @relation(fields: [producerId], references: [id])
  items                 OrderItem[]
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  productSkuId        String
  quantity            Int
  pricePerUnitAtOrder Decimal  // POPRAWKA: Float -> Decimal
  
  order               Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productSku          ProductSku @relation(fields: [productSkuId], references: [id], onDelete: Restrict)
}

model Multimedia {
  id             String            @id @default(cuid())
  url            String
  fileType       FileType          // POPRAWKA: String -> FileType
  altText        String?
  ownerId        String
  createdAt      DateTime          @default(now())
  
  owner          User              @relation(fields: [ownerId], references: [id])
  usedAsLogo     User[]            @relation("UserLogo")
  usedAsStartImg User[]            @relation("UserStartScreenImage")
  usedInProducts Product[]
  usedInVariants PropertyVariant[]
  usedInSkus     ProductSku[]
}